@page "/signup"
@rendermode InteractiveServer
@inject NavigationManager Navigation

<PageTitle>Sign Up</PageTitle>

<h1>Create Account</h1>

 <EditForm Model="@registerModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
        <ValidationMessage For="@(() => registerModel.Email)" />
    </div>

    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
        <ValidationMessage For="@(() => registerModel.Password)" />
    </div>

    <div class="mb-3">
        <label>Confirm Password</label>
        <InputText id="confirm-password" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" />
        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
    </div>

    <button type="submit" class="btn btn-primary" @onclick="HandleValidSubmit">Register</button>
 </EditForm>

@code {
    private RegisterModel registerModel = new();
        private void HandleValidSubmit()
        {
            // Do your login logic here
            Console.WriteLine($"Email: {registerModel.Email}, Password: {registerModel.Password}");
            
            // Redirect to dashboard after successful login [Finish]
            Navigation.NavigateTo("/dashboard");
        }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long.")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Re-enter your password.")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
